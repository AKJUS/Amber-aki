plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jlleitschuh.gradle.ktlint' version "11.5.0"
    id 'com.google.gms.google-services'
    id 'com.google.devtools.ksp'
}

android {
    namespace 'com.greenart7c3.nostrsigner'
    compileSdk 34

    defaultConfig {
        applicationId "com.greenart7c3.nostrsigner"
        minSdk 26
        targetSdk 34
        versionCode 56
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
    }

    buildTypes {
        release {
            // minifyEnabled false
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "@string/app_name_release"
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "app_name", "@string/app_name_debug"
        }
    }

    flavorDimensions += "version"

    productFlavors {
        create("play") {
            getIsDefault().set(true)
            dimension = "version"
        }
        create("free") {
            dimension = "version"
        }
        create("offline") {
            dimension = "version"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "x86_64", "arm64-v8a", "armeabi-v7a"
            universalApk true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.12"
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation(libs.quartz) {
        exclude group: 'net.java.dev.jna'
    }
    implementation(libs.jna) {
        artifact { type = "aar" }
    }
    implementation libs.core.splashscreen

    implementation libs.core.ktx
    implementation libs.activity.compose
    implementation libs.ui
    implementation libs.ui.tooling.preview

    implementation libs.runtime.livedata

    // Navigation
    implementation libs.navigation.compose

    // Observe Live data as State
    implementation libs.runtime.livedata

    implementation libs.material3
    implementation libs.material.icons.extended

    implementation libs.appcompat

    testImplementation libs.junit
    testImplementation libs.mockk
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.ui.test.junit4
    debugImplementation libs.ui.tooling
    debugImplementation libs.ui.test.manifest

    implementation libs.security.crypto.ktx

    // Lifecycle
    implementation libs.lifecycle.runtime.compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.lifecycle.runtime.ktx

    // For QR generation
    implementation libs.core
    implementation libs.zxing.android.embedded

    // Json Serialization
    implementation libs.converter.gson

    // Markdown (With fix for full-image bleeds)
    implementation(libs.richtext.ui)
    implementation(libs.richtext.ui.material3)
    implementation(libs.richtext.commonmark)

    // Biometrics
    implementation libs.biometric.ktx

    playImplementation platform(libs.firebase.bom)
    playImplementation(libs.firebase.messaging)
    freeImplementation(libs.android.connector)
    ksp(libs.room.compiler)
    implementation(libs.room.ktx)

    freeImplementation(libs.okhttp)
    playImplementation(libs.okhttp)
}